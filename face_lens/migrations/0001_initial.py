# Generated by Django 5.2.1 on 2025-05-16 20:25

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Дата изменения')),
                ('avatar', models.ImageField(blank=True, default='avatar/default/no_photo.png', null=True, upload_to='avatar', verbose_name='Аватар')),
                ('bio', models.TextField(blank=True, null=True, verbose_name='Биография')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='Дата рождения')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Дата изменения')),
                ('image', models.ImageField(upload_to='photos/%Y/%m/%d/', verbose_name='Фотография')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Фотография',
                'verbose_name_plural': 'Фотографии',
                'ordering': ('-created',),
                'unique_together': {('user', 'created')},
            },
        ),
        migrations.CreateModel(
            name='FaceAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Дата изменения')),
                ('estimated_age', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Оценка возраста')),
                ('skin_health_score', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, verbose_name='Оценка состояние кожи')),
                ('wrinkles_score', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, verbose_name='Оценка морщин')),
                ('acne_score', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, verbose_name='Оценка угревой сыпи')),
                ('mood', models.CharField(blank=True, max_length=50, verbose_name='Настроение')),
                ('emotion_detected', models.CharField(blank=True, max_length=50, verbose_name='Эмоция')),
                ('health_comment', models.TextField(blank=True, verbose_name='Комментарий пользователя')),
                ('photo', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='analysis', to='face_lens.photo', verbose_name='Фотография')),
            ],
            options={
                'verbose_name': 'Анализ лица',
                'verbose_name_plural': 'Анализы лица',
            },
        ),
        migrations.CreateModel(
            name='UserSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Дата изменения')),
                ('auto_photo', models.BooleanField(default=True, verbose_name='Автоматическое фото')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='settings', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Настройки пользователя',
                'verbose_name_plural': 'Настройки пользователей',
            },
        ),
        migrations.CreateModel(
            name='TimerPhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Дата изменения')),
                ('notify_time', models.TimeField(default='10:00', verbose_name='Установка времени автоматического фото')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='settings', to='face_lens.usersettings', verbose_name='Настройки пользователя')),
            ],
            options={
                'verbose_name': 'Настройка времени',
                'verbose_name_plural': 'Настройки времени',
            },
        ),
    ]
